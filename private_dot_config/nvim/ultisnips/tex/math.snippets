global !p
def isMath():
  return int(vim.eval('vimtex#syntax#in_mathzone()')) > 0
endglobal
snippet ;a "alpha" iA
\alpha
endsnippet

snippet ;b "beta" iA
\beta
endsnippet

snippet ;g "gamma" iA
\gamma
endsnippet

snippet ;e "epsilon" iA
\epsilon
endsnippet

snippet rad "Square Root" i
\sqrt{${1:${VISUAL}}}$0
endsnippet

snippet ooo "\infty" iA
\infty
endsnippet

snippet sympy "sympy block " i
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "evaluate sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '') \
    .replace('^', '**') \
    .replace('{', '(') \
    .replace('}', ')') + ')')
`
endsnippet

context "isMath()"
snippet pp "power" iA
^{$1}$0
endsnippet

context "isMath()"
snippet /p\d/ "short power without parentheses" riA
^`!p snip.rv = match.group(0)[1]` $0
endsnippet

context "isMath()"
snippet pc "complement" iA
^C $0
endsnippet

context "isMath()"
snippet __ "subscript" Ai
_{$1} $0
endsnippet

context "isMath()"
snippet '([A-Za-oq-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "isMath()"
snippet '([A-Za-oq-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

# fractions:
context "isMath()"
snippet ff "fraction" iA
\\frac{$1}{$2}$0
endsnippet

context "isMath()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

context "isMath()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "isMath()"
snippet '^.*\)/' "() Fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

context "isMath()"
snippet sb "subseteq" iA
\subseteq
endsnippet

context "isMath()"
snippet sp "supseteq" iA
\supseteq
endsnippet
# vim:ft=snippets:
