global !p
def isMath():
  return int(vim.eval('vimtex#syntax#in_mathzone()')) > 0
endglobal
snippet ;a "alpha" iA
\alpha
endsnippet

snippet ;b "beta" iA
\beta
endsnippet

snippet ;g "gamma" iA
\gamma
endsnippet

snippet ;e "epsilon" iA
\epsilon
endsnippet

context "isMath()"
snippet lim "limit" wA
\lim_{${2:n} \to ${3:\infty}}$0$1
endsnippet

context "isMath()"
snippet sum "sum" wA
\sum_{k=${3:1}}^{${2:n}} $0$1
endsnippet

context "isMath()"
snippet product "product" wA
\prod_{${1:n=${2:1}}}^{${3:\infty}} ${4:${VISUAL}} $0
endsnippet

context "isMath()"
snippet partial "d/dx" wA
\frac{\partial ${1:V}}{\partial ${2:x}} $0
endsnippet

context "isMath()"
snippet inv "infimum" wA
\inf 
endsnippet

context "isMath()"
snippet ceil "Ceil" wA
\left\lceil $1 \right\rceil $0
endsnippet

context "isMath()"
snippet floor "Floor" Aw
\left\lfloor $1 \right\rfloor$0
endsnippet

context "isMath()"
snippet impl "implies" wA
\implies 
endsnippet

context "isMath()"
snippet impd "impliedby" wA
\impliedby 
endsnippet

context "isMath()"
snippet mto "mapsto" wA
\mapsto 
endsnippet

context "isMath()"
snippet mfr "mapsfrom" wA
\mapsfrom 
endsnippet

context "isMath()"
snippet '(?<!\\)(sin|cos|arccot|cot|csc|ln|log|exp|star|perp|le|ge|neq|implies|impliedby|iff|mapsto|mapsfrom|sup|ran)' "ln" rwA
\\`!p snip.rv = match.group(1)` 
endsnippet

context "isMath()"
snippet Nn "cap" w
\cap 
endsnippet

context "isMath()"
snippet Uu "cup" w
\cup 
endsnippet

context "isMath()"
snippet UU "bigcup" w
\bigcup_{${2:i \in ${3: I}}} $0$1
endsnippet

context "isMath()"
snippet NN "bigcap" w
\bigcap_{${2:i \in ${3: I}}} $0$1
endsnippet

context "isMath()"
snippet inn "in " iA
\in 
endsnippet

context "isMath()"
snippet rad "Square Root" i
\sqrt{${1:${VISUAL}}}$0
endsnippet

context "isMath()"
snippet root "... Root" wi
\sqrt[$1]{${2:${VISUAL}}}$0
endsnippet

context "isMath()"
snippet inf "\infty" iA
\infty
endsnippet

context "isMath()"
snippet sympy "sympy block " i
sympy $1 sympy$0
endsnippet

priority 10000
context "isMath()"
snippet 'sympy(.*)sympy' "evaluate sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '') \
    .replace('^', '**') \
    .replace('{', '(') \
    .replace('}', ')') + ')')
`
endsnippet

context "isMath()"
snippet pp "power" iA
^{$1}$0
endsnippet

context "isMath()"
snippet /p\d/ "short power without parentheses" riA
^`!p snip.rv = match.group(0)[1]` $0
endsnippet

context "not isMath()"
snippet /seq([a-tv-z])/ "sequence" Awr
\$(`!p snip.rv = match.group(1)[0]`_n)\$
endsnippet

#context "isMath()"
snippet pc "complement" iA
^{C} $0
endsnippet

context "isMath()"
snippet oo "subscript2" Ai
_{$1} $0
endsnippet

context "isMath()"
snippet __ "subscript" Ai
_{$1} $0
endsnippet

context "isMath()"
snippet '([A-Za-oq-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "isMath()"
snippet '([A-Za-oq-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

# fractions:
context "isMath()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

context "isMath()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "isMath()"
snippet '^.*\)/' "() Fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

context "isMath()"
snippet sb "subseteq" iA
\subseteq
endsnippet

context "isMath()"
snippet sp "supseteq" iA
\supseteq
endsnippet
# vim:ft=snippets:
