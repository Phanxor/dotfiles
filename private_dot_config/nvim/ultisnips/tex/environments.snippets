global !p
def isMath():
  return int(vim.eval('vimtex#syntax#in_mathzone()')) > 0
def isEnv(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
	return x != '0' and y != '0'
#def isEnv(name):
#  return vim.eval('vimtex#syntax#in("' + name + '")')
def create_table(snip):
	rows = snip.buffer[snip.line].split('x')[0]
	cols = snip.buffer[snip.line].split('x')[1]
	int_val = lambda string: int(''.join(s for s in string if s.isdigit()))
	rows = int_val(rows)
	cols = int_val(cols)
	offset = cols + 1
	old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]
	snip.buffer[snip.line] = ''
	final_str = old_spacing + "\\begin{tabular}{|" + "|".join(['$' + str(i + 1) for i in range(cols)]) + "|}\\hline \n"
	for i in range(rows):
		final_str += old_spacing + '\t'
		final_str += " & ".join(['$' + str(i * cols + j + offset) for j in range(cols)])
		#final_str += " \\\\\\\n"
		final_str += "\\\\\\ \\hline\n"
	final_str += old_spacing + "\\end{tabular}\n$0"
	snip.expand_anon(final_str)

def add_row(snip):
	row_len = int(''.join(s for s in snip.buffer[snip.line] if s.isdigit()))
	old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]
	snip.buffer[snip.line] = ''
	final_str = old_spacing
	final_str += " & ".join(['$' + str(j + 1) for j in range(row_len)])
	final_str += " \\\\\\"
	snip.expand_anon(final_str)
endglobal

context "not isMath()"
snippet begin "spawn a tag with end tag"
\begin{$1}
$2
\end{$1}
endsnippet

priority 1
context "not isEnv('enumerate')"
snippet ll "create an alphanumeric list" bA
\begin{enumerate}[label=(\alph*)]
  \item $0
\end{enumerate}
endsnippet

priority 0
context "not isEnv('enumerate')"
snippet ll "create an alphanumeric list on the next line" Aws

\begin{enumerate}[label=(\alph*)]
  \item $0
\end{enumerate}
endsnippet

context "isEnv('enumerate')"
snippet ll "create a new list item" As

\item $1
endsnippet

context "not isMath()"
snippet beg "begin and end tag" bA
\begin{$1}
$0
\end{$1}
endsnippet

context "isMath()"
snippet lrb "left and right accolade" iA
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

context "not isMath()"
snippet lrb "also a left and right accolade" iA
\$\left\\{ ${1:${VISUAL}} \right\\}\$ $0
endsnippet

context "not isMath()"
snippet /,,\w/ "single letter math" Air
\$`!p snip.rv = match.group(0)[2]`\$$0
endsnippet

context "not isMath()"
snippet /h[NZQRCO]/ "single letter sets" Ar
\$\\`!p snip.rv = match.group(0)[1]`\$ $0
endsnippet

context "isMath()"
snippet /h[Nzqrco]/ "single letter sets in math" Air
\\`!p snip.rv = match.group(0)[1].upper()` $0
endsnippet

context "not isMath()"
snippet mm "math env" Aw
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
  snip.rv = ' '
else:
  snip.rv = ''
`$2
endsnippet

context "not isMath()"
snippet nn "big math env" Aws

\[
$1
.\]
$0
endsnippet

snippet ? "question answer format" bA
\begin{ex}{$1}
$2
\end{ex}
\begin{sol}\
$3
\end{sol}
$0
endsnippet

context "not isMath()"
snippet fig "Figure environment" bA
\begin{figure}[${2:htb}]
	\centering
	\includegraphics[width=${3:\linewidth}]{${1:path}}
	\caption{${4:$1}}
	\label{fig:${5:${1/\W+/-/g}}}
\end{figure}
endsnippet

snippet prf "proof" bA
\begin{proof}
$0
\end{proof}
endsnippet

snippet tab "tabular / array environment" b
\begin{${1:t}${1/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}{${2:c}}
$0${2/(?<=.)(c|l|r)|./(?1: & )/g}
\end{$1${1/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}
endsnippet

snippet table "Table environment" b
\begin{table}[${1:htpb}]
	\centering
	\caption{${2:caption}}
	\label{tab:${3:label}}

	\begin{${4:t}${4/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}{${5:c}}
		$0${5/(?<=.)(c|l|r)|./(?1: & )/g}
	\end{$4${4/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}
\end{table}
endsnippet

pre_expand "create_table(snip)"
snippet "gentbl(\d+)x(\d+)" "Generate table of *width* by *height*" r
endsnippet

pre_expand "add_row(snip)"
snippet "tr(\d+)" "Add table row of dimension ..." r
endsnippet

# vim:ft=snippets:
